/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifnmg.AcademicSystem_Presentation_Desktop;

import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.Client;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.ClientRepository;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.Contract;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.ContractRepository;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.Plan;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.RepositoryFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author diego
 */
public class ContractSearch extends javax.swing.JInternalFrame {

    ContractRepository repositoryCo = RepositoryFactory.getContractRepository();
    ClientRepository repositoryC = RepositoryFactory.getClientRepository();
    
    Contract contract = new Contract();
    /**
     * Creates new form ContractSearch
     */
    public ContractSearch() {
        this.contract = new Contract();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNew = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlan = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnSeach = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Search Contract");

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        tblPlan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Client", "Plan", "User"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPlan);
        if (tblPlan.getColumnModel().getColumnCount() > 0) {
            tblPlan.getColumnModel().getColumn(0).setResizable(false);
            tblPlan.getColumnModel().getColumn(1).setResizable(false);
            tblPlan.getColumnModel().getColumn(2).setResizable(false);
            tblPlan.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Client ID:");

        btnSeach.setText("Search");
        btnSeach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeachActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSeach)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNew)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSeach)
                    .addComponent(btnNew))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        ContractRegister screen = new ContractRegister();
        this.getParent().add(screen);
        screen.setVisible(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSeachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeachActionPerformed

        //Aqui eu pego o dado que está no campo texto

        List<Contract> result = new ArrayList<>();
        int value = 0;
        
        if(!this.txtID.getText().isEmpty()){
            Client client = this.repositoryC.Open(Long.valueOf(this.txtID.getText()));
            
            if(client != null){
                //value = 1;
                result = this.repositoryCo.SearchAll();
                List<Contract> resultT = new ArrayList<>();
                
                for(Contract contract : result){
                    
                    if(contract.getClient().equals(client)){
                        resultT.add(contract);
                    }
                    
                }
                
                //Crio um atributo do tipo que recebe colunas e linhas
                DefaultTableModel model = new DefaultTableModel();

                //Alimento com os nomes das colunas
                model.addColumn("Date");
                model.addColumn("Client");
                model.addColumn("Plan");
                model.addColumn("User");

                //Aqui eu alimento as linhas com os dados da lista
                for(Contract p : resultT){
                    Vector linha = new Vector();
                    linha.add(p.getDatetime());
                    linha.add(p.getClient().getName());
                    linha.add(p.getPlan().getName());
                    linha.add(p.getUser().getName());
                    model.addRow(linha);
                }
                //Aqui eu preencho na tabela
                tblPlan.setModel(model);
            }
        }else{
            result = repositoryCo.SearchClientPlan(null,null);
            //Crio um atributo do tipo que recebe colunas e linhas
            DefaultTableModel model = new DefaultTableModel();

        //Alimento com os nomes das colunas
            model.addColumn("Date");
            model.addColumn("Client");
            model.addColumn("Plan");
            model.addColumn("User");

        //Aqui eu alimento as linhas com os dados da lista
            for(Contract p : result){
                Vector linha = new Vector();
                linha.add(p.getDatetime());
                linha.add(p.getClient().getName());
                linha.add(p.getPlan().getName());
                linha.add(p.getUser().getName());
                model.addRow(linha);
            }
        //Aqui eu preencho na tabela
            tblPlan.setModel(model);
        }
        //Aqui eu alimento uma lista com o método pesquisa que retorna uma lista
        //List<Client> result = repository.Search(client);


    }//GEN-LAST:event_btnSeachActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSeach;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPlan;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables
}
