/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifnmg.AcademicSystem_Presentation_Desktop;

import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.Client;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.ClientRepository;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.ContractRepository;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.Plan;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.PlanRepository;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.RepositoryFactory;
import br.edu.ifnmg.AcademicSystem_LogicaAplicacao.User;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author diego
 */
public class ContractRegister extends javax.swing.JInternalFrame {

    PlanRepository repositoryP = RepositoryFactory.getPlanRepository();
    ContractRepository repositoryCo = RepositoryFactory.getContractRepository();
    ClientRepository repositoryC = RepositoryFactory.getClientRepository();
    
    Plan plan;
    User user;
    Client client;
    
    /**
     * Creates new form ContractRegister
     */
    public ContractRegister() {
        this.user = new User();
        this.plan = new Plan();
        this.client = new Client();
        initComponents();
    }
    
    public void setContract(User user){
        this.setTable();
        this.user = user;
    }

    public void setTable(){
        List<Plan> result = new ArrayList<>();
        
        
        result = repositoryP.Search(null);
        
        //Aqui eu alimento uma lista com o m√©todo pesquisa que retorna uma lista
        //List<Client> result = repository.Search(client);
        
        //Crio um atributo do tipo que recebe colunas e linhas 
        DefaultTableModel model = new DefaultTableModel();
        
        //Alimento com os nomes das colunas 
        model.addColumn("Plan");
        model.addColumn("Price");
        
        //Aqui eu alimento as linhas com os dados da lista
        for(Plan p : result){
            Vector linha = new Vector();
            linha.add(p.getName());
            linha.add(p.getPrice().toString());
            model.addRow(linha);
        }
        //Aqui eu preencho na tabela 
        tblPlan.setModel(model);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtClientId = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPlanName = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlan = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Contract Register");

        jLabel1.setText("Client Id:");

        try {
            txtClientId.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Plan Name:");

        try {
            txtPlanName.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        tblPlan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPlan);
        if (tblPlan.getColumnModel().getColumnCount() > 0) {
            tblPlan.getColumnModel().getColumn(0).setResizable(false);
            tblPlan.getColumnModel().getColumn(1).setResizable(false);
        }

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClientId))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPlanName))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtClientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPlanName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
        if(!this.txtClientId.getText().isEmpty() && !this.txtPlanName.getText().isEmpty()){
            List<Client> listClient = this.repositoryC.Search(null);
            List<Plan> listPlan = this.repositoryP.Search(null);
            int value = 0;
            int valuee = 0;
            
            for(Client client : listClient){
                if(client.getId().equals(this.txtClientId.getText())){
                    value = 1;
                    this.client = client;
                }
            }
            for(Plan plan : listPlan){
                if(plan.getName().equals(this.txtPlanName.getText())){
                    valuee = 1; 
                    this.plan = plan;
                }
            }
            
            if(value == 1 && valuee == 1){
                
            }else{
            
            }
        }else{
            
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPlan;
    private javax.swing.JFormattedTextField txtClientId;
    private javax.swing.JFormattedTextField txtPlanName;
    // End of variables declaration//GEN-END:variables
}
